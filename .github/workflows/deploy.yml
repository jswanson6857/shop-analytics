name: Deploy Infrastructure

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      action:
        description: "Choose action to perform"
        required: true
        default: "plan"
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  AWS_REGION: us-east-1
  TF_VERSION: 1.5.0

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate -no-color

      # MANUAL DESTROY JOB - Destroys ALL deployed resources
      - name: DESTROY ALL RESOURCES (Manual Only)
        if: github.event.inputs.action == 'destroy'
        run: |
          echo "üö® DESTROYING ALL AWS RESOURCES DEPLOYED BY THIS RUNNER üö®"
          echo "==============================================================="
          echo "This will permanently delete ALL resources including:"
          echo "- Lambda functions (webhook-handler, websocket-handler, broadcast-handler)"
          echo "- DynamoDB tables (webhook-data, websocket-connections) and ALL DATA"
          echo "- API Gateway (REST and WebSocket)"
          echo "- CloudWatch Log Groups and ALL LOGS"
          echo "- IAM Roles and Policies"
          echo "- Event Source Mappings"
          echo "==============================================================="
          echo ""

          # Show what exists before deletion
          echo "üìã CURRENT RESOURCES TO BE DELETED:"
          echo ""

          echo "Lambda Functions:"
          aws lambda list-functions --query "Functions[?contains(FunctionName, 'webhook-ingestion')].{Name:FunctionName,Runtime:Runtime}" --output table || echo "None found"

          echo "DynamoDB Tables:"
          aws dynamodb list-tables --query "TableNames[?contains(@, 'webhook-ingestion')]" --output table || echo "None found"

          echo "REST APIs:"
          aws apigateway get-rest-apis --query "items[?contains(name, 'webhook-ingestion')].{Name:name,Id:id}" --output table || echo "None found"

          echo "WebSocket APIs:"
          aws apigatewayv2 get-apis --query "Items[?contains(Name, 'webhook-ingestion')].{Name:Name,Id:ApiId}" --output table || echo "None found"

          echo "CloudWatch Log Groups:"
          aws logs describe-log-groups --log-group-name-prefix "/aws/lambda/webhook-ingestion" --query "logGroups[].logGroupName" --output table || echo "None found"

          echo "IAM Roles:"
          aws iam list-roles --query "Roles[?contains(RoleName, 'webhook-ingestion')].RoleName" --output table || echo "None found"

          echo "IAM Policies:"
          aws iam list-policies --scope Local --query "Policies[?contains(PolicyName, 'webhook-ingestion')].PolicyName" --output table || echo "None found"

          echo ""
          echo "‚è∞ Starting deletion in 15 seconds... (This cannot be undone)"
          sleep 15

          echo ""
          echo "üóëÔ∏è STARTING RESOURCE DELETION..."
          echo ""

          # 1. Delete Event Source Mappings first (they depend on Lambda and DynamoDB)
          echo "1Ô∏è‚É£ Deleting Event Source Mappings..."
          for lambda_func in $(aws lambda list-functions --query "Functions[?contains(FunctionName, 'webhook-ingestion')].FunctionName" --output text); do
            echo "Checking event source mappings for: $lambda_func"
            for mapping_uuid in $(aws lambda list-event-source-mappings --function-name "$lambda_func" --query "EventSourceMappings[].UUID" --output text 2>/dev/null); do
              echo "  Deleting event source mapping: $mapping_uuid"
              aws lambda delete-event-source-mapping --uuid "$mapping_uuid" || true
            done
          done

          # 2. Delete Lambda functions
          echo ""
          echo "2Ô∏è‚É£ Deleting Lambda Functions..."
          for func in $(aws lambda list-functions --query "Functions[?contains(FunctionName, 'webhook-ingestion')].FunctionName" --output text); do
            echo "  Deleting Lambda function: $func"
            aws lambda delete-function --function-name "$func" || true
          done

          # 3. Delete API Gateways (REST)
          echo ""
          echo "3Ô∏è‚É£ Deleting REST API Gateways..."
          for api_id in $(aws apigateway get-rest-apis --query "items[?contains(name, 'webhook-ingestion')].id" --output text); do
            echo "  Deleting REST API: $api_id"
            aws apigateway delete-rest-api --rest-api-id "$api_id" || true
          done

          # 4. Delete API Gateways (WebSocket)
          echo ""
          echo "4Ô∏è‚É£ Deleting WebSocket APIs..."
          for api_id in $(aws apigatewayv2 get-apis --query "Items[?contains(Name, 'webhook-ingestion')].ApiId" --output text); do
            echo "  Deleting WebSocket API: $api_id"
            aws apigatewayv2 delete-api --api-id "$api_id" || true
          done

          # 5. Delete DynamoDB tables
          echo ""
          echo "5Ô∏è‚É£ Deleting DynamoDB Tables..."
          for table in $(aws dynamodb list-tables --query "TableNames[?contains(@, 'webhook-ingestion')]" --output text); do
            echo "  Deleting DynamoDB table: $table"
            aws dynamodb delete-table --table-name "$table" || true
          done

          # 6. Delete CloudWatch Log Groups
          echo ""
          echo "6Ô∏è‚É£ Deleting CloudWatch Log Groups..."
          for log_group in $(aws logs describe-log-groups --log-group-name-prefix "/aws/lambda/webhook-ingestion" --query "logGroups[].logGroupName" --output text); do
            echo "  Deleting log group: $log_group"
            aws logs delete-log-group --log-group-name "$log_group" || true
          done

          # 7. Detach and delete IAM policies, then delete roles
          echo ""
          echo "7Ô∏è‚É£ Deleting IAM Resources..."
          for role in $(aws iam list-roles --query "Roles[?contains(RoleName, 'webhook-ingestion')].RoleName" --output text); do
            echo "  Processing IAM role: $role"
            
            # Detach AWS managed policies
            for policy_arn in $(aws iam list-attached-role-policies --role-name "$role" --query "AttachedPolicies[].PolicyArn" --output text); do
              echo "    Detaching policy: $policy_arn"
              aws iam detach-role-policy --role-name "$role" --policy-arn "$policy_arn" || true
            done
            
            # Delete inline policies
            for policy_name in $(aws iam list-role-policies --role-name "$role" --query "PolicyNames[]" --output text); do
              echo "    Deleting inline policy: $policy_name"
              aws iam delete-role-policy --role-name "$role" --policy-name "$policy_name" || true
            done
            
            echo "    Deleting IAM role: $role"
            aws iam delete-role --role-name "$role" || true
          done

          # 8. Delete custom IAM policies
          echo ""
          echo "8Ô∏è‚É£ Deleting Custom IAM Policies..."
          for policy_arn in $(aws iam list-policies --scope Local --query "Policies[?contains(PolicyName, 'webhook-ingestion')].Arn" --output text); do
            echo "  Deleting IAM policy: $policy_arn"
            aws iam delete-policy --policy-arn "$policy_arn" || true
          done

          echo ""
          echo "‚úÖ DESTRUCTION COMPLETE"
          echo "=================================================="
          echo "All webhook-ingestion resources have been deleted"
          echo "This includes:"
          echo "‚úì Lambda functions and their code"
          echo "‚úì DynamoDB tables and ALL stored data"
          echo "‚úì API Gateway endpoints (REST and WebSocket)"
          echo "‚úì CloudWatch logs and metrics"
          echo "‚úì IAM roles and policies" 
          echo "‚úì Event source mappings"
          echo ""
          echo "Note: Some resources may take a few minutes to fully delete"
          echo "=================================================="

      - name: Stop after destroy
        if: github.event.inputs.action == 'destroy'
        run: |
          echo "Destruction job completed - workflow stopped"
          exit 0

      # MANUAL PLAN
      - name: Terraform Plan (Manual)
        if: github.event.inputs.action == 'plan'
        run: terraform plan -no-color

      # AUTOMATIC PLAN FOR PRs
      - name: Terraform Plan (PR)
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      # AUTOMATIC APPLY ON MAIN PUSH
      - name: Terraform Apply (Auto on main)
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false

      # MANUAL APPLY
      - name: Terraform Apply (Manual)
        if: github.event.inputs.action == 'apply'
        run: terraform apply -auto-approve -input=false

      - name: Output URLs
        if: (github.ref == 'refs/heads/main' && github.event_name == 'push') || github.event.inputs.action == 'apply'
        run: |
          echo "üöÄ DEPLOYMENT COMPLETE"
          echo "====================="
          echo "API Gateway URL: $(terraform output -raw api_gateway_url)"
          echo "Webhook Endpoint: $(terraform output -raw webhook_endpoint)"
          echo "WebSocket URL: $(terraform output -raw websocket_api_url)"
          echo "DynamoDB Table: $(terraform output -raw dynamodb_table_name)"
          echo "====================="
