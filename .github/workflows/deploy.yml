# .github/workflows/deploy.yml
name: Deploy Infrastructure and Frontend

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      destroy:
        description: "Destroy infrastructure"
        required: false
        default: false
        type: boolean

env:
  AWS_REGION: us-east-1
  TF_VERSION: 1.5.0
  NODE_VERSION: 18

jobs:
  destroy:
    name: "Destroy Infrastructure"
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.destroy == 'true'

    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Setup Terraform Cloud Credentials
        run: |
          cat > ~/.terraformrc << EOF
          credentials "app.terraform.io" {
            token = "${{ secrets.TF_API_TOKEN }}"
          }
          EOF

      - name: Terraform Init
        run: terraform init

      - name: Terraform Destroy
        run: terraform destroy -auto-approve
        env:
          TF_VAR_aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  terraform:
    name: "Deploy Infrastructure"
    runs-on: ubuntu-latest
    if: github.event.inputs.destroy != 'true'

    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    outputs:
      websocket_url: ${{ steps.tf_output.outputs.websocket_url }}
      s3_bucket: ${{ steps.tf_output.outputs.s3_bucket }}
      cloudfront_url: ${{ steps.tf_output.outputs.cloudfront_url }}
      cloudfront_distribution_id: ${{ steps.tf_output.outputs.cloudfront_distribution_id }}
      webhook_endpoint: ${{ steps.tf_output.outputs.webhook_endpoint }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Setup Terraform Cloud Credentials
        run: |
          cat > ~/.terraformrc << EOF
          credentials "app.terraform.io" {
            token = "${{ secrets.TF_API_TOKEN }}"
          }
          EOF

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false
        env:
          TF_VAR_aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
            #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
            #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
        env:
          TF_VAR_aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Get Terraform Outputs
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        id: tf_output
        run: |
          echo "websocket_url=$(terraform output -raw websocket_api_url)" >> $GITHUB_OUTPUT
          echo "s3_bucket=$(terraform output -raw s3_bucket_name)" >> $GITHUB_OUTPUT
          echo "cloudfront_url=$(terraform output -raw cloudfront_url)" >> $GITHUB_OUTPUT
          echo "cloudfront_distribution_id=$(terraform output -raw cloudfront_distribution_id)" >> $GITHUB_OUTPUT
          echo "webhook_endpoint=$(terraform output -raw webhook_endpoint)" >> $GITHUB_OUTPUT

  frontend:
    name: "Build and Deploy Frontend"
    runs-on: ubuntu-latest
    needs: terraform
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && github.event.inputs.destroy != 'true'

    defaults:
      run:
        shell: bash
        working-directory: ./frontend

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          rm -f package-lock.json
          npm install
          npm install --package-lock-only

      - name: Create environment file
        run: |
          echo "REACT_APP_WEBSOCKET_URL=${{ needs.terraform.outputs.websocket_url }}" > .env
          echo "NODE_ENV=production" >> .env
          echo "Environment file created:"
          cat .env

      - name: Build React application
        run: npm run build

      - name: Verify build output
        run: |
          echo "Build directory contents:"
          ls -la build/
          echo "Checking for index.html:"
          cat build/index.html | head -10

      - name: Deploy to S3 with proper MIME types
        run: |
          echo "Deploying to S3 bucket: ${{ needs.terraform.outputs.s3_bucket }}"

          # First, clear the bucket
          aws s3 rm s3://${{ needs.terraform.outputs.s3_bucket }}/ --recursive

          # Upload HTML files with correct content type and no cache
          find build -name "*.html" -exec aws s3 cp {} s3://${{ needs.terraform.outputs.s3_bucket }}/{} \
            --content-type "text/html; charset=utf-8" \
            --cache-control "no-cache, no-store, must-revalidate" \
            --metadata-directive REPLACE \;

          # Upload CSS files with correct content type
          find build -name "*.css" -exec aws s3 cp {} s3://${{ needs.terraform.outputs.s3_bucket }}/{} \
            --content-type "text/css; charset=utf-8" \
            --cache-control "max-age=31536000" \
            --metadata-directive REPLACE \;

          # Upload JS files with correct content type
          find build -name "*.js" -exec aws s3 cp {} s3://${{ needs.terraform.outputs.s3_bucket }}/{} \
            --content-type "application/javascript; charset=utf-8" \
            --cache-control "max-age=31536000" \
            --metadata-directive REPLACE \;

          # Upload JSON files with correct content type
          find build -name "*.json" -exec aws s3 cp {} s3://${{ needs.terraform.outputs.s3_bucket }}/{} \
            --content-type "application/json; charset=utf-8" \
            --cache-control "max-age=31536000" \
            --metadata-directive REPLACE \;

          # Upload remaining files with long cache
          aws s3 sync build/ s3://${{ needs.terraform.outputs.s3_bucket }}/ \
            --exclude "*.html" --exclude "*.css" --exclude "*.js" --exclude "*.json" \
            --cache-control "max-age=31536000" \
            --metadata-directive REPLACE

          # Set public read permissions
          aws s3api put-bucket-acl --bucket ${{ needs.terraform.outputs.s3_bucket }} --acl public-read

      - name: Invalidate CloudFront cache
        run: |
          echo "Invalidating CloudFront distribution: ${{ needs.terraform.outputs.cloudfront_distribution_id }}"
          aws cloudfront create-invalidation \
            --distribution-id ${{ needs.terraform.outputs.cloudfront_distribution_id }} \
            --paths "/*"

      - name: Wait for invalidation to complete
        run: |
          echo "Waiting for CloudFront invalidation to complete..."
          sleep 60

      - name: Test deployment
        run: |
          echo "Testing deployment..."
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" ${{ needs.terraform.outputs.cloudfront_url }})
          echo "CloudFront response code: $RESPONSE"
          if [ "$RESPONSE" != "200" ]; then
            echo "Warning: CloudFront not returning 200, but this might be normal immediately after deployment"
          fi

      - name: Output deployment URLs
        run: |
          echo "🎉 Deployment completed!"
          echo ""
          echo "📊 Your Auto Shop Dashboard HTTPS URL:"
          echo "   ${{ needs.terraform.outputs.cloudfront_url }}"
          echo ""
          echo "🔗 WebSocket URL: ${{ needs.terraform.outputs.websocket_url }}"
          echo "📡 Webhook URL: ${{ needs.terraform.outputs.webhook_endpoint }}"
          echo ""
          echo "💡 Use the HTTPS CloudFront URL above - it should display your dashboard securely"
          echo "🔄 Note: It may take a few minutes for CloudFront changes to propagate globally"

  test_deployment:
    name: "Test Complete Pipeline"
    runs-on: ubuntu-latest
    needs: [terraform, frontend]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && github.event.inputs.destroy != 'true'

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Test webhook endpoint and check DynamoDB
        run: |
          echo "Testing webhook endpoint..."

          # Send test webhook
          RESPONSE=$(curl -s -w "%{http_code}" -X POST ${{ needs.terraform.outputs.webhook_endpoint }} \
            -H "Content-Type: application/json" \
            -d '{
              "data": {
                "repairOrderNumber": 99999,
                "repairOrderStatus": {"name": "Work-In-Progress"},
                "repairOrderCustomLabel": {"name": "GitHub Actions Test"},
                "totalSales": 25000,
                "amountPaid": 0,
                "customerId": 12345,
                "vehicleId": 67890,
                "jobs": []
              },
              "event": "Test repair order created by GitHub Actions deployment"
            }')

          echo "Webhook response: $RESPONSE"

          if [[ "${RESPONSE: -3}" == "200" ]]; then
            echo "✅ Webhook test passed"
          else
            echo "❌ Webhook test failed with code: ${RESPONSE: -3}"
            exit 1
          fi

          echo ""
          echo "🎯 Pipeline test complete!"
          echo "📊 Dashboard URL: ${{ needs.terraform.outputs.cloudfront_url }}"
          echo "📡 Configure your auto shop system to send webhooks to:"
          echo "   ${{ needs.terraform.outputs.webhook_endpoint }}"
