# .github/workflows/deploy.yml
name: Deploy Infrastructure and Frontend

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      destroy:
        description: "Destroy infrastructure"
        required: false
        default: false
        type: boolean

env:
  AWS_REGION: us-east-1
  TF_VERSION: 1.5.0
  NODE_VERSION: 18

jobs:
  destroy:
    name: "Destroy Infrastructure"
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.destroy == 'true'

    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Setup Terraform Cloud Credentials
        run: |
          cat > ~/.terraformrc << EOF
          credentials "app.terraform.io" {
            token = "${{ secrets.TF_API_TOKEN }}"
          }
          EOF

      - name: Terraform Init
        run: terraform init

      - name: Terraform Destroy
        run: terraform destroy -auto-approve
        env:
          TF_VAR_aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  terraform:
    name: "Deploy Infrastructure"
    runs-on: ubuntu-latest
    if: github.event.inputs.destroy != 'true'

    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    outputs:
      websocket_url: ${{ steps.tf_output.outputs.websocket_url }}
      s3_bucket: ${{ steps.tf_output.outputs.s3_bucket }}
      cloudfront_url: ${{ steps.tf_output.outputs.cloudfront_url }}
      cloudfront_distribution_id: ${{ steps.tf_output.outputs.cloudfront_distribution_id }}
      webhook_endpoint: ${{ steps.tf_output.outputs.webhook_endpoint }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Setup Terraform Cloud Credentials
        run: |
          cat > ~/.terraformrc << EOF
          credentials "app.terraform.io" {
            token = "${{ secrets.TF_API_TOKEN }}"
          }
          EOF

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false
        env:
          TF_VAR_aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
        env:
          TF_VAR_aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Get Terraform Outputs
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        id: tf_output
        run: |
          echo "websocket_url=$(terraform output -raw websocket_api_url)" >> $GITHUB_OUTPUT
          echo "s3_bucket=$(terraform output -raw s3_bucket_name)" >> $GITHUB_OUTPUT
          echo "cloudfront_url=$(terraform output -raw cloudfront_url)" >> $GITHUB_OUTPUT
          echo "cloudfront_distribution_id=$(terraform output -raw cloudfront_distribution_id)" >> $GITHUB_OUTPUT
          echo "webhook_endpoint=$(terraform output -raw webhook_endpoint)" >> $GITHUB_OUTPUT

  frontend:
    name: "Build and Deploy Frontend"
    runs-on: ubuntu-latest
    needs: terraform
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && github.event.inputs.destroy != 'true'

    defaults:
      run:
        shell: bash
        working-directory: ./frontend

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          rm -f package-lock.json
          npm install
          npm install --package-lock-only

      - name: Create environment file with WebSocket URL
        run: |
          echo "REACT_APP_WEBSOCKET_URL=${{ needs.terraform.outputs.websocket_url }}" > .env
          echo "NODE_ENV=production" >> .env
          echo "Environment file created with WebSocket URL:"
          cat .env

      - name: Build React application
        run: npm run build

      - name: Verify WebSocket URL is embedded in build
        run: |
          echo "Verifying WebSocket URL is embedded in the build..."
          if find build/static/js/ -name "*.js" -exec grep -l "wss://" {} \; | head -1 > /dev/null; then
            echo "‚úÖ WebSocket URL found in JavaScript bundle"
            echo "Found in file: $(find build/static/js/ -name "*.js" -exec grep -l "wss://" {} \; | head -1)"
          else
            echo "‚ùå WebSocket URL NOT found in build - this will cause the original issue!"
            exit 1
          fi

      - name: Deploy to S3 with cache-busting headers
        run: |
          echo "Deploying to S3 bucket: ${{ needs.terraform.outputs.s3_bucket }}"

          # Clear existing files to prevent stale content
          echo "üßπ Clearing existing S3 content..."
          aws s3 rm s3://${{ needs.terraform.outputs.s3_bucket }}/ --recursive

          # Upload HTML files with NO CACHE (critical for fixing user access issue)
          echo "üìÑ Uploading HTML files with no-cache headers..."
          find build -name "*.html" -exec aws s3 cp {} s3://${{ needs.terraform.outputs.s3_bucket }}/{} \
            --content-type "text/html; charset=utf-8" \
            --cache-control "no-cache, no-store, must-revalidate" \
            --metadata-directive REPLACE \;

          # Upload CSS files with long cache (these can be cached safely)
          echo "üé® Uploading CSS files..."
          find build -name "*.css" -exec aws s3 cp {} s3://${{ needs.terraform.outputs.s3_bucket }}/{} \
            --content-type "text/css; charset=utf-8" \
            --cache-control "max-age=31536000" \
            --metadata-directive REPLACE \;

          # Upload JS files with long cache (these contain the WebSocket URL)
          echo "üìú Uploading JavaScript files..."
          find build -name "*.js" -exec aws s3 cp {} s3://${{ needs.terraform.outputs.s3_bucket }}/{} \
            --content-type "application/javascript; charset=utf-8" \
            --cache-control "max-age=31536000" \
            --metadata-directive REPLACE \;

          # Upload JSON files
          echo "üìã Uploading JSON files..."
          find build -name "*.json" -exec aws s3 cp {} s3://${{ needs.terraform.outputs.s3_bucket }}/{} \
            --content-type "application/json; charset=utf-8" \
            --cache-control "max-age=31536000" \
            --metadata-directive REPLACE \;

          # Upload remaining files
          echo "üìÅ Uploading remaining static assets..."
          aws s3 sync build/ s3://${{ needs.terraform.outputs.s3_bucket }}/ \
            --exclude "*.html" --exclude "*.css" --exclude "*.js" --exclude "*.json" \
            --cache-control "max-age=31536000" \
            --metadata-directive REPLACE

          echo "‚úÖ All files uploaded successfully to S3"

      - name: Invalidate CloudFront cache (critical for user access fix)
        run: |
          echo "üîÑ Invalidating CloudFront cache to ensure users get fresh content..."
          echo "Distribution ID: ${{ needs.terraform.outputs.cloudfront_distribution_id }}"

          aws cloudfront create-invalidation \
            --distribution-id ${{ needs.terraform.outputs.cloudfront_distribution_id }} \
            --paths "/*"

          echo "‚úÖ CloudFront invalidation initiated"

      - name: Wait for cache invalidation to propagate
        run: |
          echo "‚è≥ Waiting for CloudFront invalidation to propagate globally..."
          echo "This ensures users worldwide get the updated app with correct WebSocket URL"
          sleep 90

      - name: Test deployment accessibility
        run: |
          echo "üß™ Testing deployment accessibility..."
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" ${{ needs.terraform.outputs.cloudfront_url }})
          echo "CloudFront response code: $RESPONSE"

          if [ "$RESPONSE" = "200" ]; then
            echo "‚úÖ Deployment accessible via CloudFront"
          else
            echo "‚ö†Ô∏è  CloudFront returned HTTP $RESPONSE (may be normal immediately after deployment)"
          fi

      - name: Test WebSocket connectivity
        run: |
          echo "üîå Testing WebSocket endpoint accessibility..."
          WEBSOCKET_URL="${{ needs.terraform.outputs.websocket_url }}"

          # Use curl to test WebSocket endpoint (basic connectivity test)
          if curl -s --connect-timeout 10 --head "${WEBSOCKET_URL/wss:/https:}" > /dev/null 2>&1; then
            echo "‚úÖ WebSocket endpoint is accessible"
          else
            echo "‚ö†Ô∏è  WebSocket endpoint test inconclusive (this is normal for WebSocket URLs)"
          fi

          echo "WebSocket URL for users: $WEBSOCKET_URL"

      - name: Output deployment URLs and fix summary
        run: |
          echo ""
          echo "üéâ DEPLOYMENT COMPLETED SUCCESSFULLY!"
          echo "========================================="
          echo ""
          echo "üìä Your Auto Shop Dashboard URL (share this with users):"
          echo "   ${{ needs.terraform.outputs.cloudfront_url }}"
          echo ""
          echo "üîß ORIGINAL ISSUE FIXES APPLIED:"
          echo "   ‚úÖ WebSocket URL properly embedded in React build"
          echo "   ‚úÖ HTML files deployed with no-cache headers"
          echo "   ‚úÖ CloudFront cache invalidated globally"
          echo "   ‚úÖ Users will now get fresh app with correct WebSocket connection"
          echo ""
          echo "üîó Technical Details:"
          echo "   WebSocket URL: ${{ needs.terraform.outputs.websocket_url }}"
          echo "   Webhook URL: ${{ needs.terraform.outputs.webhook_endpoint }}"
          echo ""
          echo "üïê Allow 5-10 minutes for global propagation, then test from multiple devices"
          echo ""
          echo "üéØ The issue where other users couldn't see real-time data should now be resolved!"

  test_deployment:
    name: "Test Complete Pipeline"
    runs-on: ubuntu-latest
    needs: [terraform, frontend]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && github.event.inputs.destroy != 'true'

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Test webhook endpoint functionality
        run: |
          echo "üß™ Testing webhook endpoint to ensure real-time data flow..."

          # Send test webhook data
          RESPONSE=$(curl -s -w "%{http_code}" -X POST ${{ needs.terraform.outputs.webhook_endpoint }} \
            -H "Content-Type: application/json" \
            -d '{
              "data": {
                "repairOrderNumber": 12345,
                "repairOrderStatus": {"name": "Work-In-Progress"},
                "repairOrderCustomLabel": {"name": "GitHub Actions Test - User Access Fix"},
                "totalSales": 35000,
                "amountPaid": 10000,
                "customerId": 98765,
                "vehicleId": 54321,
                "jobs": [{"name": "Oil Change", "authorized": true}],
                "customerConcerns": [{"concern": "Engine noise"}]
              },
              "event": "Test repair order for deployment verification"
            }')

          echo "Webhook response: $RESPONSE"
          HTTP_CODE="${RESPONSE: -3}"

          if [ "$HTTP_CODE" = "200" ]; then
            echo "‚úÖ Webhook endpoint test passed - real-time data flow confirmed"
          else
            echo "‚ùå Webhook endpoint test failed with code: $HTTP_CODE"
            exit 1
          fi

      - name: Final deployment summary
        run: |
          echo ""
          echo "üéØ DEPLOYMENT TEST COMPLETE!"
          echo "=============================="
          echo ""
          echo "‚úÖ Infrastructure deployed successfully"
          echo "‚úÖ Frontend built with correct WebSocket URL" 
          echo "‚úÖ Cache-busting deployment completed"
          echo "‚úÖ Webhook endpoint tested and working"
          echo ""
          echo "üåç SHARE THIS URL WITH ALL USERS:"
          echo "   ${{ needs.terraform.outputs.cloudfront_url }}"
          echo ""
          echo "üí° NEXT STEPS:"
          echo "   1. Test the dashboard from multiple devices/browsers"
          echo "   2. Configure your auto shop system to send webhooks to:"
          echo "      ${{ needs.terraform.outputs.webhook_endpoint }}"
          echo "   3. Monitor real-time data updates across all user sessions"
          echo ""
          echo "üéâ The original issue should now be resolved for all users!"
