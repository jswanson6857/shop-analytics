name: Deploy Infrastructure

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  AWS_REGION: us-east-1
  TF_VERSION: 1.5.0

jobs:
  terraform:
    name: "Terraform Deploy"
    runs-on: ubuntu-latest
    outputs:
      apply-success: ${{ steps.apply.outcome }}

    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        id: apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false

      - name: Output API Gateway URL
        if: github.ref == 'refs/heads/main' && github.event_name == 'push' && steps.apply.outcome == 'success'
        run: |
          echo "API Gateway URL: $(terraform output -raw api_gateway_url)"
          echo "Webhook Endpoint: $(terraform output -raw webhook_endpoint)"

  # DESTROY JOB - Only available after successful apply
  destroy:
    name: "Destroy Infrastructure (Manual)"
    runs-on: ubuntu-latest
    needs: terraform
    if: github.ref == 'refs/heads/main' && needs.terraform.outputs.apply-success == 'success'
    environment:
      name: destroy-approval
      # This creates a manual approval gate

    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        run: terraform init

      - name: Show Destroy Plan
        run: |
          echo "The following resources will be DESTROYED:"
          terraform plan -destroy -no-color

      - name: Terraform Destroy
        run: |
          echo "DESTROYING ALL TERRAFORM RESOURCES"
          echo "This will delete:"
          echo "- DynamoDB tables and ALL DATA"
          echo "- Lambda functions"
          echo "- API Gateway"
          echo "- All logs and configurations"
          echo ""
          echo "Proceeding with destruction..."
          terraform destroy -auto-approve -input=false

      - name: Destruction Complete
        run: |
          echo "All Terraform resources have been destroyed"
          echo "To recreate infrastructure, push to main branch again"
