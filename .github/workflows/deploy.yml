name: Deploy Infrastructure

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      action:
        description: "Choose action to perform"
        required: true
        default: "plan"
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  AWS_REGION: us-east-1
  TF_VERSION: 1.5.0

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate -no-color

      # MANUAL DESTROY JOB
      - name: Terraform Destroy (Manual Only)
        if: github.event.inputs.action == 'destroy'
        run: |
          echo "‚ö†Ô∏è  DESTROYING ALL TERRAFORM RESOURCES ‚ö†Ô∏è"
          echo "This will permanently delete:"
          echo "- DynamoDB tables and ALL DATA"
          echo "- Lambda functions"
          echo "- API Gateway"
          echo "- WebSocket API"
          echo "- All logs and configurations"
          echo ""
          echo "Showing what will be destroyed:"
          terraform plan -destroy -no-color
          echo ""
          echo "Proceeding with destruction in 10 seconds..."
          sleep 10
          terraform destroy -auto-approve -input=false

      - name: Stop after destroy
        if: github.event.inputs.action == 'destroy'
        run: |
          echo "‚úÖ All resources have been destroyed"
          exit 0

      # MANUAL PLAN
      - name: Terraform Plan (Manual)
        if: github.event.inputs.action == 'plan'
        run: terraform plan -no-color

      # AUTOMATIC PLAN FOR PRs
      - name: Terraform Plan (PR)
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      # AUTOMATIC APPLY ON MAIN PUSH
      - name: Terraform Apply (Auto on main)
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false

      # MANUAL APPLY
      - name: Terraform Apply (Manual)
        if: github.event.inputs.action == 'apply'
        run: terraform apply -auto-approve -input=false

      - name: Output URLs
        if: (github.ref == 'refs/heads/main' && github.event_name == 'push') || github.event.inputs.action == 'apply'
        run: |
          echo "API Gateway URL: $(terraform output -raw api_gateway_url)"
          echo "Webhook Endpoint: $(terraform output -raw webhook_endpoint)"
          echo "WebSocket URL: $(terraform output -raw websocket_api_url)"
