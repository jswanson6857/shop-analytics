name: Deploy Infrastructure and Frontend

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      destroy:
        description: "Destroy infrastructure"
        required: false
        default: false
        type: boolean

env:
  AWS_REGION: us-east-1
  TF_VERSION: 1.5.0
  NODE_VERSION: 18

jobs:
  destroy:
    name: "Destroy Infrastructure"
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.destroy == 'true'
    defaults:
      run:
        shell: bash
        working-directory: ./terraform
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Setup Terraform Cloud Credentials
        run: |
          cat > ~/.terraformrc << EOF
          credentials "app.terraform.io" {
            token = "${{ secrets.TF_API_TOKEN }}"
          }
          EOF

      - name: Terraform Init
        run: terraform init

      - name: Terraform Destroy
        run: terraform destroy -auto-approve
        env:
          TF_VAR_aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  terraform:
    name: "Deploy Infrastructure"
    runs-on: ubuntu-latest
    if: github.event.inputs.destroy != 'true'
    defaults:
      run:
        shell: bash
        working-directory: ./terraform
    outputs:
      websocket_url: ${{ steps.tf_output.outputs.websocket_url }}
      s3_bucket: ${{ steps.tf_output.outputs.s3_bucket }}
      cloudfront_url: ${{ steps.tf_output.outputs.cloudfront_url }}
      cloudfront_distribution_id: ${{ steps.tf_output.outputs.cloudfront_distribution_id }}
      webhook_endpoint: ${{ steps.tf_output.outputs.webhook_endpoint }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Setup Terraform Cloud Credentials
        run: |
          cat > ~/.terraformrc << EOF
          credentials "app.terraform.io" {
            token = "${{ secrets.TF_API_TOKEN }}"
          }
          EOF

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false
        env:
          TF_VAR_aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
        env:
          TF_VAR_aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Get Terraform Outputs
        id: tf_output
        run: |
          echo "websocket_url=$(terraform output -raw websocket_api_url)" >> $GITHUB_OUTPUT
          echo "s3_bucket=$(terraform output -raw s3_bucket_name)" >> $GITHUB_OUTPUT
          echo "cloudfront_url=$(terraform output -raw cloudfront_url)" >> $GITHUB_OUTPUT
          echo "cloudfront_distribution_id=$(terraform output -raw cloudfront_distribution_id)" >> $GITHUB_OUTPUT
          echo "webhook_endpoint=$(terraform output -raw webhook_endpoint)" >> $GITHUB_OUTPUT

  frontend:
    name: "Build and Deploy Frontend"
    runs-on: ubuntu-latest
    needs: terraform
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && github.event.inputs.destroy != 'true'
    defaults:
      run:
        shell: bash
        working-directory: ./frontend
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Create environment file with WebSocket + Auth0
        run: |
          echo "REACT_APP_WEBSOCKET_URL=${{ needs.terraform.outputs.websocket_url }}" > .env
          echo "REACT_APP_AUTH0_DOMAIN=${{ secrets.OKTA_ISSUER }}" >> .env
          echo "REACT_APP_AUTH0_CLIENT_ID=${{ secrets.OKTA_CLIENT_ID }}" >> .env
          echo "NODE_ENV=production" >> .env
          echo "‚úÖ Environment file created:"
          cat .env

      - name: Build React application
        run: npm run build

      - name: Verify WebSocket URL is embedded in build
        run: |
          echo "Verifying WebSocket URL is embedded in the build..."
          if find build/static/js/ -name "*.js" -exec grep -l "wss://" {} \; | head -1 > /dev/null; then
            echo "‚úÖ WebSocket URL found in JavaScript bundle"
          else
            echo "‚ùå WebSocket URL NOT found in build"
            exit 1
          fi

      - name: Deploy to S3 with cache-busting headers
        run: |
          echo "Deploying to S3 bucket: ${{ needs.terraform.outputs.s3_bucket }}"
          aws s3 sync build/ s3://${{ needs.terraform.outputs.s3_bucket }}/ --delete
          aws s3 cp s3://${{ needs.terraform.outputs.s3_bucket }}/index.html s3://${{ needs.terraform.outputs.s3_bucket }}/index.html \
            --metadata-directive REPLACE \
            --cache-control "no-cache, no-store, must-revalidate" \
            --content-type "text/html"

      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ needs.terraform.outputs.cloudfront_distribution_id }} \
            --paths "/*"

      - name: Test webhook endpoint functionality
        run: |
          echo "Testing webhook endpoint..."
          RESPONSE=$(curl -s -w "%{http_code}" -X POST ${{ needs.terraform.outputs.webhook_endpoint }} \
            -H "Content-Type: application/json" \
            -d '{"event":"Test deployment"}')
          HTTP_CODE="${RESPONSE: -3}"
          if [ "$HTTP_CODE" = "200" ]; then
            echo "‚úÖ Webhook endpoint working"
          else
            echo "‚ùå Webhook endpoint failed with code $HTTP_CODE"
            exit 1
          fi

  test_deployment:
    name: "Test Complete Pipeline"
    runs-on: ubuntu-latest
    needs: [terraform, frontend]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && github.event.inputs.destroy != 'true'
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Test deployment accessibility
        run: |
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" ${{ needs.terraform.outputs.cloudfront_url }})
          echo "CloudFront response code: $RESPONSE"
          if [ "$RESPONSE" = "200" ]; then
            echo "‚úÖ Deployment accessible"
          else
            echo "‚ùå Deployment inaccessible"
            exit 1
