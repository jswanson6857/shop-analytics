# .github/workflows/deploy.yml
name: Deploy Infrastructure and Frontend

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  AWS_REGION: us-east-1
  TF_VERSION: 1.5.0
  NODE_VERSION: 18

jobs:
  terraform:
    name: "Deploy Infrastructure"
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    outputs:
      websocket_url: ${{ steps.tf_output.outputs.websocket_url }}
      s3_bucket: ${{ steps.tf_output.outputs.s3_bucket }}
      cloudfront_distribution_id: ${{ steps.tf_output.outputs.cloudfront_distribution_id }}
      cloudfront_url: ${{ steps.tf_output.outputs.cloudfront_url }}
      webhook_endpoint: ${{ steps.tf_output.outputs.webhook_endpoint }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          # Try to remove problematic OAC resource if it exists
          terraform state rm aws_cloudfront_origin_access_control.frontend || true

          # Apply the configuration
          terraform apply -auto-approve -input=false

      - name: Get Terraform Outputs
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        id: tf_output
        run: |
          echo "websocket_url=$(terraform output -raw websocket_api_url)" >> $GITHUB_OUTPUT
          echo "s3_bucket=$(terraform output -raw s3_bucket_name)" >> $GITHUB_OUTPUT
          echo "cloudfront_distribution_id=$(terraform output -raw cloudfront_distribution_id)" >> $GITHUB_OUTPUT
          echo "cloudfront_url=$(terraform output -raw cloudfront_url)" >> $GITHUB_OUTPUT
          echo "webhook_endpoint=$(terraform output -raw webhook_endpoint)" >> $GITHUB_OUTPUT

  frontend:
    name: "Build and Deploy Frontend"
    runs-on: ubuntu-latest
    needs: terraform
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    defaults:
      run:
        shell: bash
        working-directory: ./frontend

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          # Remove package-lock.json to avoid version conflicts
          rm -f package-lock.json
          # Install dependencies fresh
          npm install
          # Generate new package-lock.json
          npm install --package-lock-only

      - name: Create environment file
        run: |
          echo "REACT_APP_WEBSOCKET_URL=${{ needs.terraform.outputs.websocket_url }}" > .env
          echo "Environment file created:"
          cat .env

      - name: Build React application
        run: npm run build

      - name: Deploy to S3
        run: |
          echo "Deploying to S3 bucket: ${{ needs.terraform.outputs.s3_bucket }}"

          # Upload all files with proper MIME types
          aws s3 sync build/ s3://${{ needs.terraform.outputs.s3_bucket }} --delete

          # Set specific content types for web files
          aws s3 cp s3://${{ needs.terraform.outputs.s3_bucket }}/index.html s3://${{ needs.terraform.outputs.s3_bucket }}/index.html \
            --metadata-directive REPLACE \
            --content-type "text/html" \
            --cache-control "max-age=300"

          # Set content type for CSS files
          aws s3 cp s3://${{ needs.terraform.outputs.s3_bucket }}/ s3://${{ needs.terraform.outputs.s3_bucket }}/ \
            --recursive \
            --exclude "*" \
            --include "*.css" \
            --metadata-directive REPLACE \
            --content-type "text/css" \
            --cache-control "max-age=31536000"

          # Set content type for JS files
          aws s3 cp s3://${{ needs.terraform.outputs.s3_bucket }}/ s3://${{ needs.terraform.outputs.s3_bucket }}/ \
            --recursive \
            --exclude "*" \
            --include "*.js" \
            --metadata-directive REPLACE \
            --content-type "application/javascript" \
            --cache-control "max-age=31536000"

          # Set content type for JSON files
          aws s3 cp s3://${{ needs.terraform.outputs.s3_bucket }}/ s3://${{ needs.terraform.outputs.s3_bucket }}/ \
            --recursive \
            --exclude "*" \
            --include "*.json" \
            --metadata-directive REPLACE \
            --content-type "application/json" \
            --cache-control "max-age=31536000"

      - name: Invalidate CloudFront cache
        run: |
          echo "Invalidating CloudFront distribution: ${{ needs.terraform.outputs.cloudfront_distribution_id }}"
          aws cloudfront create-invalidation \
            --distribution-id ${{ needs.terraform.outputs.cloudfront_distribution_id }} \
            --paths "/*"

      - name: Output deployment URLs
        run: |
          echo "üéâ Deployment completed successfully!"
          echo ""
          echo "üìä Your Auto Shop Dashboard is now live at:"
          echo "   ${{ needs.terraform.outputs.cloudfront_url }}"
          echo ""
          echo "üîó WebSocket URL configured: ${{ needs.terraform.outputs.websocket_url }}"
          echo ""
          echo "üìù Configure your auto shop system to send webhooks to:"
          echo "   ${{ needs.terraform.outputs.webhook_endpoint }}"

  test_deployment:
    name: "Test Deployment"
    runs-on: ubuntu-latest
    needs: [terraform, frontend]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Test webhook endpoint
        run: |
          echo "Testing webhook endpoint..."
          curl -X POST ${{ needs.terraform.outputs.webhook_endpoint }} \
            -H "Content-Type: application/json" \
            -d '{
              "data": {
                "repairOrderNumber": 99999,
                "repairOrderStatus": {"name": "Work-In-Progress"},
                "repairOrderCustomLabel": {"name": "GitHub Actions Test"},
                "totalSales": 25000,
                "amountPaid": 0,
                "customerId": 12345,
                "vehicleId": 67890,
                "jobs": []
              },
              "event": "Test repair order created by GitHub Actions deployment"
            }' \
            --fail \
            --show-error \
            --silent

      - name: Wait for CloudFront propagation
        run: |
          echo "Waiting 30 seconds for CloudFront propagation..."
          sleep 30

      - name: Test frontend accessibility
        run: |
          echo "Testing frontend accessibility..."
          curl -I ${{ needs.terraform.outputs.cloudfront_url }} \
            --fail \
            --show-error \
            --silent

      - name: Deployment Summary
        run: |
          echo "‚úÖ All tests passed!"
          echo ""
          echo "üåê Frontend URL: ${{ needs.terraform.outputs.cloudfront_url }}"
          echo "üîó Webhook URL: ${{ needs.terraform.outputs.webhook_endpoint }}"
          echo "üì° WebSocket URL: ${{ needs.terraform.outputs.websocket_url }}"
          echo ""
          echo "üí° Your auto shop dashboard is ready to receive real-time webhook data!"
