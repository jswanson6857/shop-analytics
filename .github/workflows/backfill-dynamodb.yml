# .github/workflows/backfill-dynamodb.yml
# ONE-TIME USE: Adds pk='all' to all existing DynamoDB items
# DELETE THIS FILE AFTER RUNNING SUCCESSFULLY

name: Backfill DynamoDB pk Field

on:
  workflow_dispatch:
    inputs:
      confirm:
        description: 'Type "BACKFILL" to confirm execution'
        required: true
        default: ""

jobs:
  backfill:
    name: "Add pk='all' to All Items"
    runs-on: ubuntu-latest

    # Safety check - only run if confirmation matches
    if: github.event.inputs.confirm == 'BACKFILL'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Dependencies
        run: |
          pip install boto3

      - name: Create Backfill Script
        run: |
          cat > backfill_pk_field.py << 'EOF'
          # backfill_pk_field.py
          import boto3
          from decimal import Decimal
          import os

          # Configuration from environment
          TABLE_NAME = os.environ.get('TABLE_NAME', 'webhook-ingestion-webhook-data')
          AWS_REGION = os.environ.get('AWS_REGION', 'us-east-1')

          def backfill_pk_field():
              """
              Scans all items in DynamoDB and adds pk='all' to items missing it.
              """
              
              dynamodb = boto3.resource('dynamodb', region_name=AWS_REGION)
              table = dynamodb.Table(TABLE_NAME)
              
              print(f"üîç Starting backfill for table: {TABLE_NAME}")
              print(f"üìç Region: {AWS_REGION}\n")
              
              # Counters
              items_scanned = 0
              items_updated = 0
              items_skipped = 0
              errors = 0
              
              # Scan all items with pagination
              scan_kwargs = {
                  'ProjectionExpression': 'id, #ts, pk',
                  'ExpressionAttributeNames': {'#ts': 'timestamp'}
              }
              
              try:
                  while True:
                      response = table.scan(**scan_kwargs)
                      items = response.get('Items', [])
                      
                      for item in items:
                          items_scanned += 1
                          
                          # Check if pk field exists and equals 'all'
                          if 'pk' in item and item['pk'] == 'all':
                              items_skipped += 1
                              if items_scanned % 100 == 0:
                                  print(f"Progress: {items_scanned} scanned, {items_updated} updated, {items_skipped} skipped")
                              continue
                          
                          # Update item to add pk='all'
                          try:
                              table.update_item(
                                  Key={
                                      'id': item['id'],
                                      'timestamp': item['timestamp']
                                  },
                                  UpdateExpression='SET pk = :pk_val',
                                  ExpressionAttributeValues={
                                      ':pk_val': 'all'
                                  }
                              )
                              items_updated += 1
                              
                              if items_updated % 100 == 0:
                                  print(f"‚úÖ Updated {items_updated} items so far...")
                                  
                          except Exception as e:
                              errors += 1
                              print(f"‚ùå Error updating item {item.get('id')}: {str(e)}")
                      
                      # Check if there are more items to scan
                      if 'LastEvaluatedKey' not in response:
                          break
                      
                      scan_kwargs['ExclusiveStartKey'] = response['LastEvaluatedKey']
                      print(f"üìÑ Fetching next batch... (Total scanned: {items_scanned})")
              
              except Exception as e:
                  print(f"\n‚ùå Fatal error during scan: {str(e)}")
                  return False
              
              # Summary
              print("\n" + "="*60)
              print("üéâ BACKFILL COMPLETE!")
              print("="*60)
              print(f"üìä Items scanned:  {items_scanned:,}")
              print(f"‚úÖ Items updated:  {items_updated:,}")
              print(f"‚è≠Ô∏è  Items skipped:  {items_skipped:,} (already had pk='all')")
              print(f"‚ùå Errors:         {errors}")
              print("="*60)
              
              if errors > 0:
                  print(f"\n‚ö†Ô∏è  Completed with {errors} errors. Check logs above.")
                  return False
              
              print("\n‚ú® Success! All items now have pk='all'")
              print("üîÑ Refresh your dashboard to see all historical data!")
              return True

          if __name__ == '__main__':
              print("="*60)
              print("DynamoDB Backfill Script")
              print("Adding pk='all' to all existing items")
              print("="*60)
              print()
              
              success = backfill_pk_field()
              
              if not success:
                  exit(1)
          EOF

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Run Backfill Script
        env:
          TABLE_NAME: webhook-ingestion-webhook-data
          AWS_REGION: us-east-1
        run: |
          echo "üöÄ Starting DynamoDB backfill..."
          echo "üìã Table: $TABLE_NAME"
          echo "üìç Region: $AWS_REGION"
          echo ""
          python backfill_pk_field.py

      - name: Verify Backfill Success
        run: |
          echo ""
          echo "‚úÖ Backfill completed successfully!"
          echo ""
          echo "üéØ NEXT STEPS:"
          echo "1. ‚úÖ Go to your dashboard and refresh the page"
          echo "2. ‚úÖ You should now see all ~4,972 events"
          echo "3. ‚úÖ Only 'posted by' ROs will be visible (as intended)"
          echo "4. ‚úÖ All events for same RO are combined into one card"
          echo ""
          echo "üóëÔ∏è  IMPORTANT: Delete this workflow file after verifying:"
          echo "   .github/workflows/backfill-dynamodb.yml"
          echo ""
          echo "üí° All NEW webhooks will automatically have pk='all' going forward"

      - name: Post-Backfill Summary
        if: success()
        run: |
          echo "::notice title=Backfill Complete::All DynamoDB items now have pk='all'. Refresh your dashboard to see all historical data!"

      - name: Backfill Failed
        if: failure()
        run: |
          echo "::error title=Backfill Failed::Check the logs above for errors. You may need to re-run the workflow."
          exit 1
