// src/components/CustomerImportPage.js - ULTRA-RESILIENT: Handles ANY CSV format
import React, { useState } from "react";

const CustomerImportPage = ({ customers, updateCustomers }) => {
  const [importStatus, setImportStatus] = useState("");
  const [importedCount, setImportedCount] = useState(0);
  const [searchTerm, setSearchTerm] = useState("");
  const [importWarnings, setImportWarnings] = useState([]);

  const handleFileUpload = (event) => {
    const file = event.target.files[0];
    if (!file) return;

    const reader = new FileReader();

    reader.onload = (e) => {
      try {
        const text = e.target.result;
        const lines = text.split("\n").filter((line) => line.trim());

        if (lines.length === 0) {
          setImportStatus("error");
          alert("‚ùå Empty CSV file");
          return;
        }

        // Parse header with aggressive cleaning
        const rawHeader = lines[0];
        const header = rawHeader.split(",").map(
          (h) =>
            h
              .trim()
              .toLowerCase()
              .replace(/['"]/g, "")
              .replace(/\s+/g, "_") // Convert spaces to underscores
              .replace(/[^\w_]/g, "") // Remove special characters
        );

        console.log("üìã Cleaned CSV Headers:", header);
        console.log("üìã Original Headers:", rawHeader.split(","));

        // ULTRA-FLEXIBLE: Try MANY variations to find customer ID
        const customerIdPatterns = [
          "customer_id",
          "customerid",
          "customer",
          "client_id",
          "clientid",
          "client",
          "id",
          "cust_id",
          "custid",
          "account_id",
          "accountid",
          "account",
          "member_id",
          "memberid",
          "customer_number",
          "customernumber",
          "client_number",
          "account_number",
        ];

        const customerIdIndex = header.findIndex((h) =>
          customerIdPatterns.some(
            (pattern) => h.includes(pattern) || pattern.includes(h)
          )
        );

        // ULTRA-FLEXIBLE: Try MANY variations to find name columns
        const firstNamePatterns = [
          "first_name",
          "firstname",
          "first",
          "fname",
          "given_name",
          "givenname",
        ];

        const lastNamePatterns = [
          "last_name",
          "lastname",
          "last",
          "lname",
          "surname",
          "family_name",
          "familyname",
        ];

        const fullNamePatterns = [
          "name",
          "full_name",
          "fullname",
          "customer_name",
          "customername",
          "client_name",
          "clientname",
        ];

        const firstNameIndex = header.findIndex((h) =>
          firstNamePatterns.some(
            (pattern) => h === pattern || h.includes(pattern)
          )
        );

        const lastNameIndex = header.findIndex((h) =>
          lastNamePatterns.some(
            (pattern) => h === pattern || h.includes(pattern)
          )
        );

        const fullNameIndex = header.findIndex(
          (h) =>
            fullNamePatterns.some(
              (pattern) => h === pattern || h.includes(pattern)
            ) &&
            !firstNamePatterns.some((pattern) => h.includes(pattern)) &&
            !lastNamePatterns.some((pattern) => h.includes(pattern))
        );

        // ULTRA-FLEXIBLE: Try MANY variations to find phone
        const phonePatterns = [
          "phone",
          "mobile",
          "cell",
          "telephone",
          "tel",
          "contact",
          "phone_number",
          "phonenumber",
          "mobile_number",
          "cell_number",
          "contact_number",
        ];

        const phoneIndex = header.findIndex((h) =>
          phonePatterns.some(
            (pattern) => h.includes(pattern) || pattern.includes(h)
          )
        );

        console.log("üîç Column Detection Results:", {
          customerIdIndex,
          firstNameIndex,
          lastNameIndex,
          fullNameIndex,
          phoneIndex,
          headers: header,
        });

        // ULTRA-FALLBACK: If no customer ID found, always auto-generate IDs
        let useAutoGeneratedIds = false;
        let effectiveCustomerIdIndex = customerIdIndex;

        if (customerIdIndex === -1) {
          // Just auto-generate IDs - no need to bother the user
          useAutoGeneratedIds = true;
          console.log(
            "‚ö†Ô∏è No customer ID column found - will auto-generate IDs"
          );
        }

        const newCustomers = { ...customers };
        let count = 0;
        const warnings = [];
        let nextAutoId = Math.max(0, ...Object.keys(customers).map(Number)) + 1;

        // Process each row with ULTRA-RESILIENT parsing
        for (let i = 1; i < lines.length; i++) {
          try {
            // Handle quoted CSV values properly
            const values = [];
            let currentValue = "";
            let insideQuotes = false;

            for (let char of lines[i]) {
              if (char === '"') {
                insideQuotes = !insideQuotes;
              } else if (char === "," && !insideQuotes) {
                values.push(currentValue.trim());
                currentValue = "";
              } else {
                currentValue += char;
              }
            }
            values.push(currentValue.trim()); // Add last value

            // Remove quotes from values
            const cleanValues = values.map((v) =>
              v.replace(/^"|"$/g, "").trim()
            );

            if (cleanValues.length < 1) continue;

            // Get or generate customer ID
            let customerId;
            if (useAutoGeneratedIds) {
              customerId = String(nextAutoId++);
            } else if (effectiveCustomerIdIndex !== -1) {
              customerId = cleanValues[effectiveCustomerIdIndex]?.trim();
              if (!customerId) {
                // If the ID column is empty, auto-generate
                customerId = String(nextAutoId++);
              }
            } else {
              customerId = String(nextAutoId++);
            }

            // Extract name with maximum flexibility
            let name = "";
            if (firstNameIndex !== -1 && lastNameIndex !== -1) {
              const firstName = cleanValues[firstNameIndex]?.trim() || "";
              const lastName = cleanValues[lastNameIndex]?.trim() || "";
              name = `${firstName} ${lastName}`.trim();
            } else if (fullNameIndex !== -1) {
              name = cleanValues[fullNameIndex]?.trim() || "";
            } else {
              // FALLBACK: Look for ANY column that might be a name
              for (let idx = 0; idx < cleanValues.length; idx++) {
                if (
                  idx !== effectiveCustomerIdIndex &&
                  cleanValues[idx]?.length > 0
                ) {
                  // Check if it looks like a name (contains letters, not all numbers)
                  if (
                    /[a-zA-Z]/.test(cleanValues[idx]) &&
                    !/^\d+$/.test(cleanValues[idx])
                  ) {
                    name = cleanValues[idx].trim();
                    break;
                  }
                }
              }
            }

            if (!name) {
              name = `Customer ${customerId}`;
            }

            // Extract phone with maximum flexibility
            let phone = "N/A";
            if (phoneIndex !== -1) {
              phone = cleanValues[phoneIndex]?.trim() || "N/A";
            } else {
              // FALLBACK: Look for anything that looks like a phone number
              for (const value of cleanValues) {
                if (/[\d().\-\s]{7,}/.test(value)) {
                  phone = value.trim();
                  break;
                }
              }
            }

            newCustomers[customerId] = {
              name: name,
              phone: phone,
              importedAt: new Date().toISOString(),
            };
            count++;
          } catch (rowError) {
            warnings.push(`Row ${i + 1}: ${rowError.message}`);
            console.error(`Error processing row ${i + 1}:`, rowError);
          }
        }

        if (count === 0) {
          setImportStatus("error");
          alert(
            "‚ùå No customers could be imported.\n\n" +
              "Please check:\n" +
              "1. File has data rows (not just headers)\n" +
              "2. File is a valid CSV format\n" +
              "3. Columns have readable data"
          );
          return;
        }

        updateCustomers(newCustomers);
        setImportedCount(count);
        setImportWarnings(warnings);
        setImportStatus("success");

        console.log(`‚úÖ Successfully imported ${count} customers`);
        if (warnings.length > 0) {
          console.warn(`‚ö†Ô∏è Import completed with ${warnings.length} warnings`);
        }
      } catch (error) {
        console.error("Error parsing CSV:", error);
        setImportStatus("error");
        alert(
          "‚ùå Failed to parse CSV file.\n\n" +
            "Error: " +
            error.message +
            "\n\n" +
            "Please ensure:\n" +
            "1. File is a valid CSV format\n" +
            "2. File is not corrupted\n" +
            "3. File uses standard CSV delimiters (commas)"
        );
      }
    };

    reader.onerror = () => {
      setImportStatus("error");
      alert("‚ùå Failed to read file");
    };

    reader.readAsText(file);
  };

  const handleDownloadTemplate = () => {
    const template =
      "customer_id,first_name,last_name,phone\n12345,John,Doe,555-123-4567\n67890,Jane,Smith,555-987-6543";
    const blob = new Blob([template], { type: "text/csv" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = "customer_import_template.csv";
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const handleDeleteCustomer = (customerId) => {
    if (
      window.confirm(
        `Delete customer ${customers[customerId]?.name || customerId}?`
      )
    ) {
      const updated = { ...customers };
      delete updated[customerId];
      updateCustomers(updated);
    }
  };

  const handleClearAll = () => {
    if (
      window.confirm(
        "‚ö†Ô∏è Are you sure you want to delete ALL customer data?\n\n" +
          `This will remove ${
            Object.keys(customers).length
          } customers and CANNOT be undone.`
      )
    ) {
      updateCustomers({});
      setImportStatus("");
      setImportedCount(0);
      setImportWarnings([]);
    }
  };

  const filteredCustomers = Object.entries(customers).filter(
    ([id, customer]) => {
      if (!searchTerm) return true;
      const search = searchTerm.toLowerCase();
      return (
        id.includes(search) ||
        customer.name?.toLowerCase().includes(search) ||
        customer.phone?.toLowerCase().includes(search)
      );
    }
  );

  return (
    <div className="customer-import-page">
      <div className="page-header">
        <h2>üìã Import Customer Data</h2>
        <p className="page-description">
          ‚ú® <strong>Import ANY CSV format!</strong> The system automatically
          detects columns - no formatting needed!
        </p>
      </div>

      <div className="import-section">
        <div className="import-card">
          <h3>üîí Privacy & Security Notice</h3>
          <div className="security-notice">
            <p>
              ‚ö†Ô∏è <strong>Important:</strong> Customer data is stored locally in
              your browser only. It is NOT sent to any server.
            </p>
            <p>
              ‚úì Data persists between sessions using localStorage
              <br />
              ‚úì Only accessible to authenticated users
              <br />‚úì Cleared when browser data is cleared
            </p>
          </div>
        </div>

        <div className="import-card">
          <h3>üì• Upload Customer CSV</h3>

          <div className="csv-requirements">
            <h4>‚ú® Ultra-Flexible CSV Import - Works with ANY format!</h4>
            <p style={{ marginBottom: "1rem", fontWeight: 600 }}>
              üéØ Just upload your CSV - the system will figure it out
              automatically!
            </p>
            <ul>
              <li>
                <strong>Customer ID:</strong> Detects columns with: id,
                customer, client, account, etc.
                <br />
                <em
                  style={{ fontSize: "0.9rem", color: "var(--text-secondary)" }}
                >
                  ‚Üí If not found, IDs are auto-generated automatically (1, 2,
                  3...)
                </em>
              </li>
              <li>
                <strong>Name:</strong> Detects first/last name OR full name
                columns
                <br />
                <em
                  style={{ fontSize: "0.9rem", color: "var(--text-secondary)" }}
                >
                  ‚Üí Handles: first_name, lastName, name, full_name,
                  customer_name, etc.
                </em>
              </li>
              <li>
                <strong>Phone:</strong> Detects any phone-related column
                <br />
                <em
                  style={{ fontSize: "0.9rem", color: "var(--text-secondary)" }}
                >
                  ‚Üí Handles: phone, mobile, cell, telephone, contact, etc.
                </em>
              </li>
              <li>
                <strong>Missing columns?</strong> No problem - will use best
                available data
              </li>
              <li>
                <strong>Extra columns?</strong> Ignored automatically
              </li>
            </ul>
            <p
              style={{
                marginTop: "1rem",
                padding: "0.75rem",
                background: "#d4edda",
                borderLeft: "4px solid #28a745",
                borderRadius: "4px",
                fontSize: "0.9rem",
                color: "#155724",
              }}
            >
              üí° <strong>Pro Tip:</strong> Export from ANY system - no
              formatting needed! Even if your CSV has no ID column, we'll
              generate IDs for you automatically.
            </p>
          </div>

          <div className="import-actions">
            <button className="template-btn" onClick={handleDownloadTemplate}>
              üìÑ Download Example Template
            </button>

            <div className="file-upload-wrapper">
              <label className="file-upload-label">
                <input
                  type="file"
                  accept=".csv"
                  onChange={handleFileUpload}
                  className="file-upload-input"
                />
                <span className="file-upload-button">üìÇ Choose CSV File</span>
              </label>
            </div>
          </div>

          {importStatus === "success" && (
            <div className="import-status success">
              ‚úÖ Successfully imported {importedCount} customers!
              {importWarnings.length > 0 && (
                <details style={{ marginTop: "0.5rem" }}>
                  <summary style={{ cursor: "pointer", fontWeight: 600 }}>
                    ‚ö†Ô∏è View {importWarnings.length} warnings
                  </summary>
                  <ul style={{ marginTop: "0.5rem", paddingLeft: "1.5rem" }}>
                    {importWarnings.slice(0, 10).map((warning, idx) => (
                      <li
                        key={idx}
                        style={{ fontSize: "0.85rem", marginBottom: "0.25rem" }}
                      >
                        {warning}
                      </li>
                    ))}
                    {importWarnings.length > 10 && (
                      <li style={{ fontSize: "0.85rem", fontStyle: "italic" }}>
                        ... and {importWarnings.length - 10} more
                      </li>
                    )}
                  </ul>
                </details>
              )}
            </div>
          )}

          {importStatus === "error" && (
            <div className="import-status error">
              ‚ùå Import failed. Check the error message above.
            </div>
          )}
        </div>

        <div className="import-card">
          <h3>üìä Customer Data Management</h3>

          <div className="customer-stats">
            <div className="stat-box">
              <div className="stat-value">{Object.keys(customers).length}</div>
              <div className="stat-label">Total Customers</div>
            </div>
          </div>

          {Object.keys(customers).length > 0 && (
            <>
              <div className="search-box" style={{ marginBottom: "1rem" }}>
                <span className="search-icon">üîç</span>
                <input
                  type="text"
                  className="search-input"
                  placeholder="Search customers by ID, name, or phone..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                />
              </div>

              <div className="customer-preview">
                <div
                  style={{
                    display: "flex",
                    justifyContent: "space-between",
                    alignItems: "center",
                    marginBottom: "1rem",
                  }}
                >
                  <h4>All Customers ({filteredCustomers.length})</h4>
                  <button
                    className="clear-btn danger-btn"
                    onClick={handleClearAll}
                    style={{ marginTop: 0 }}
                  >
                    üóëÔ∏è Delete All
                  </button>
                </div>

                <div className="customer-table-wrapper">
                  <table className="customer-table">
                    <thead>
                      <tr>
                        <th>Customer ID</th>
                        <th>Name</th>
                        <th>Phone</th>
                        <th style={{ width: "100px", textAlign: "center" }}>
                          Actions
                        </th>
                      </tr>
                    </thead>
                    <tbody>
                      {filteredCustomers.map(([id, customer]) => (
                        <tr key={id}>
                          <td style={{ fontWeight: 600 }}>{id}</td>
                          <td>{customer.name}</td>
                          <td>{customer.phone}</td>
                          <td style={{ textAlign: "center" }}>
                            <button
                              className="delete-customer-btn"
                              onClick={() => handleDeleteCustomer(id)}
                              title="Delete this customer"
                            >
                              üóëÔ∏è
                            </button>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>

                {filteredCustomers.length === 0 && searchTerm && (
                  <div className="empty-state" style={{ padding: "2rem" }}>
                    <p>No customers found matching "{searchTerm}"</p>
                  </div>
                )}
              </div>
            </>
          )}

          {Object.keys(customers).length === 0 && (
            <div className="empty-state">
              <p>No customer data imported yet.</p>
              <p>Upload a CSV file to get started.</p>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default CustomerImportPage;
